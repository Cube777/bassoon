#include <string>
#include <vector>
#include <fstream>
#include <chrono>
#include <thread>
#include <dchain/dchain.h>
#include <nihdb/nihdb.h>
#include <curses.h>

#define DBFILE "/.password"

std::string getnstring()
{
	char c;
	std::string temp;

	while (c != '\r'){
		c = getch();
		if (c == 127){
			if (temp.length() != 0)
				temp.pop_back();
			continue;
		}
		if (c != '\r')
			temp += c;
	}
	addch('\n');
	refresh();

	return temp;
}

void finish()
{
	echo();
	nocbreak();
	nl();
	endwin();
}

int main()
{
	//Init curses
	initscr();
	noecho();
	cbreak();
	nonl();

	//Test if password db exists
	std::string temp = std::getenv("HOME");
	temp += DBFILE;
	std::ifstream test(temp.c_str());

	if (!test.is_open()) {
		addstr("Error: password database not found. Would you like to create one? [Y/n]: ");
		char c;
		c = getch();
		if (c != '\r')
			addch(c);
		addch('\n');
		addch('\n');

		if ((c == 'y') || (c == 'Y') || (c == '\r')) {
			std::ofstream touch (temp.c_str());
			if (!touch.is_open()) {
				addstr("Cannot open password database for writing. Please make sure that you have write permissions in your home folder\n");
				addstr("Press any key to exit...");
				getch();
				finish();
				return 1;
			}
			touch.close();
			nihdb::dataBase tempDB(temp);
			tempDB.AddComment("bassoon password database");
			tempDB.AddComment("This file contains all the bassoon passwords");
			tempDB.AddComment("All sensitive data is encrypted using dchain encryption library");
			tempDB.AddComment("Please do not edit this file manually");

			tempDB.CreateSection("meta");
			tempDB.CreateVar("meta", "passwd");
			tempDB.CreateVar("meta", "items");

			std::string passwd;
			bool btemp = false;
			while (!btemp)
			{
				temp.clear();
				passwd.clear();
				addstr("-->Enter new password: ");
				temp = getnstring();
				addstr("-->Confirm password: ");
				passwd = getnstring();
				btemp = (temp == passwd);
				if (!btemp)
					addstr("Passwords do not match.\n");
			}
			tempDB.ChangeVarValue("meta", "passwd", dchain::strEncrypt(passwd, passwd));

			tempDB.ApplyChanges();
			addstr("Database successfully created. Please log in to continue.\n\n");
		} else {
			finish();
			return 1;
		}
	}

	temp = std::getenv("HOME");
	temp += DBFILE;
	nihdb::dataBase datb(temp);
	std::string passwd;
	bool btemp = false;
	int count = 1;

	while (!btemp)
	{
		addstr("-->Enter password: ");
		passwd = getnstring();
		btemp = (passwd == dchain::strDecrypt(datb.ReturnVar("meta", "passwd"), passwd));

		if (!btemp){
			std::this_thread::sleep_for(std::chrono::seconds(3));
			if (count == 3) {
				addstr("Too many incorrect password attempts... Aborting, press a key to continue\n");
				getch();
				finish();
				return 1;
			}
			addstr("Incorrect password, please try again\n");
			count++;
		}
	}
	finish();
	return 0;
}
